
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000270  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b8  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000615  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000362  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ee  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */ 

#include "UART.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	29 97       	sbiw	r28, 0x09	; 9
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    UART_Cfg config = {9600U,DoubleSpeedDisable,RxcInterruptDisable,TxcInterruptDisable,UDRInterruptDisable,DataSize8Bits,ParityDisable,StopBits1};
  96:	89 e0       	ldi	r24, 0x09	; 9
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	UART_Init(&config);
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_Init>
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x2e>

000000b2 <UART_Init>:
 */ 

#include "UART.h"

Status UART_Init (UART_Cfg* a_UARtcfg_ptr)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ec 01       	movw	r28, r24
	/*Check Double speed bits & Calculate UBRR value*/
	uint16 UBRRValue = 0;
	if (a_UARtcfg_ptr->DoubleSpeed == DoubleSpeedDisable)
  b8:	8a 81       	ldd	r24, Y+2	; 0x02
  ba:	81 11       	cpse	r24, r1
  bc:	14 c0       	rjmp	.+40     	; 0xe6 <UART_Init+0x34>
	{
		ClrBit(UCSRA,U2X);
  be:	59 98       	cbi	0x0b, 1	; 11
		UBRRValue = ((F_CPU)/((a_UARtcfg_ptr->baudrate)*(16U)))-1;
  c0:	28 81       	ld	r18, Y
  c2:	39 81       	ldd	r19, Y+1	; 0x01
  c4:	22 95       	swap	r18
  c6:	32 95       	swap	r19
  c8:	30 7f       	andi	r19, 0xF0	; 240
  ca:	32 27       	eor	r19, r18
  cc:	20 7f       	andi	r18, 0xF0	; 240
  ce:	32 27       	eor	r19, r18
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	60 e4       	ldi	r22, 0x40	; 64
  d6:	72 e4       	ldi	r23, 0x42	; 66
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 14 01 	call	0x228	; 0x228 <__udivmodsi4>
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	31 09       	sbc	r19, r1
  e4:	16 c0       	rjmp	.+44     	; 0x112 <UART_Init+0x60>
	}
	else if (a_UARtcfg_ptr->DoubleSpeed == DoubleSpeedEnable)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	09 f0       	breq	.+2      	; 0xec <UART_Init+0x3a>
  ea:	8e c0       	rjmp	.+284    	; 0x208 <UART_Init+0x156>
	{
		SetBit(UCSRA,U2X);
  ec:	59 9a       	sbi	0x0b, 1	; 11
		UBRRValue = ((F_CPU)/((a_UARtcfg_ptr->baudrate)*(8U)))-1;
  ee:	28 81       	ld	r18, Y
  f0:	39 81       	ldd	r19, Y+1	; 0x01
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	60 e4       	ldi	r22, 0x40	; 64
 104:	72 e4       	ldi	r23, 0x42	; 66
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 14 01 	call	0x228	; 0x228 <__udivmodsi4>
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
	{
		return NotOk;
	}
	
	/*Clear URSEL bit into UCSRA to write in UBRRH*/
	ClrBit(UCSRA,URSEL);
 112:	5f 98       	cbi	0x0b, 7	; 11
	
	/*Set UBRR value into UBRRH & UBRRL*/
	UBRRH = (uint8)(UBRRValue>>8);
 114:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8)UBRRValue;
 116:	29 b9       	out	0x09, r18	; 9
	
	/*Check TX compelet interrupt Enable bit*/
	if (a_UARtcfg_ptr->TxcInterrupt == TxcInterruptDisable)
 118:	8c 81       	ldd	r24, Y+4	; 0x04
 11a:	81 11       	cpse	r24, r1
 11c:	02 c0       	rjmp	.+4      	; 0x122 <UART_Init+0x70>
	{
		ClrBit(UCSRB,TXCIE);
 11e:	56 98       	cbi	0x0a, 6	; 10
 120:	04 c0       	rjmp	.+8      	; 0x12a <UART_Init+0x78>
	}	
	else if (a_UARtcfg_ptr->TxcInterrupt == TxcInterruptEnable)
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	09 f0       	breq	.+2      	; 0x128 <UART_Init+0x76>
 126:	72 c0       	rjmp	.+228    	; 0x20c <UART_Init+0x15a>
	{
		SetBit(UCSRB,TXCIE);
 128:	56 9a       	sbi	0x0a, 6	; 10
	{
		return NotOk;
	}
	
	/*Check RX comolete interrupt Enable bit*/
	if (a_UARtcfg_ptr->RxcInterrupt == RxcInterruptDisable)
 12a:	8b 81       	ldd	r24, Y+3	; 0x03
 12c:	81 11       	cpse	r24, r1
 12e:	02 c0       	rjmp	.+4      	; 0x134 <UART_Init+0x82>
	{
		ClrBit(UCSRB,RXCIE);
 130:	57 98       	cbi	0x0a, 7	; 10
 132:	04 c0       	rjmp	.+8      	; 0x13c <UART_Init+0x8a>
	}
	else if (a_UARtcfg_ptr->RxcInterrupt == RxcInterruptEnable)
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	09 f0       	breq	.+2      	; 0x13a <UART_Init+0x88>
 138:	6b c0       	rjmp	.+214    	; 0x210 <UART_Init+0x15e>
	{
		SetBit(UCSRB,RXCIE);
 13a:	57 9a       	sbi	0x0a, 7	; 10
	{
		return NotOk;
	}
	
	/*Check UDR Empty interrupt Enable bit*/
	if (a_UARtcfg_ptr->UDRInterrupt == UDRInterruptDisable)
 13c:	8d 81       	ldd	r24, Y+5	; 0x05
 13e:	81 11       	cpse	r24, r1
 140:	02 c0       	rjmp	.+4      	; 0x146 <UART_Init+0x94>
	{
		ClrBit(UCSRB,UDRIE);
 142:	55 98       	cbi	0x0a, 5	; 10
 144:	04 c0       	rjmp	.+8      	; 0x14e <UART_Init+0x9c>
	}
	else if (a_UARtcfg_ptr->UDRInterrupt == UDRInterruptEnable)
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	09 f0       	breq	.+2      	; 0x14c <UART_Init+0x9a>
 14a:	64 c0       	rjmp	.+200    	; 0x214 <UART_Init+0x162>
	{
		SetBit(UCSRB,UDRIE);
 14c:	55 9a       	sbi	0x0a, 5	; 10
	{
		return NotOk;
	}
	
	/*Clear URSEL bit into UCSRA to write in UCSRC*/
	SetBit(UCSRA,URSEL);
 14e:	5f 9a       	sbi	0x0b, 7	; 11
	
	/*Check data size bits*/
	if (a_UARtcfg_ptr->DataSize == DataSize5Bits)
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	85 30       	cpi	r24, 0x05	; 5
 154:	41 f4       	brne	.+16     	; 0x166 <UART_Init+0xb4>
	{
		ClrBit(UCSRC,UCSZ0);
 156:	80 b5       	in	r24, 0x20	; 32
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UCSZ1);
 15c:	80 b5       	in	r24, 0x20	; 32
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 162:	52 98       	cbi	0x0a, 2	; 10
 164:	27 c0       	rjmp	.+78     	; 0x1b4 <UART_Init+0x102>
	}
	else if (a_UARtcfg_ptr->DataSize == DataSize6Bits)
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	41 f4       	brne	.+16     	; 0x17a <UART_Init+0xc8>
	{
		SetBit(UCSRC,UCSZ0);
 16a:	80 b5       	in	r24, 0x20	; 32
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UCSZ1);
 170:	80 b5       	in	r24, 0x20	; 32
 172:	8b 7f       	andi	r24, 0xFB	; 251
 174:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 176:	52 98       	cbi	0x0a, 2	; 10
 178:	1d c0       	rjmp	.+58     	; 0x1b4 <UART_Init+0x102>
	}
	else if (a_UARtcfg_ptr->DataSize == DataSize7Bits)
 17a:	87 30       	cpi	r24, 0x07	; 7
 17c:	41 f4       	brne	.+16     	; 0x18e <UART_Init+0xdc>
	{
		ClrBit(UCSRC,UCSZ0);
 17e:	80 b5       	in	r24, 0x20	; 32
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 184:	80 b5       	in	r24, 0x20	; 32
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 18a:	52 98       	cbi	0x0a, 2	; 10
 18c:	13 c0       	rjmp	.+38     	; 0x1b4 <UART_Init+0x102>
	}
	else if (a_UARtcfg_ptr->DataSize == DataSize8Bits)
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	41 f4       	brne	.+16     	; 0x1a2 <UART_Init+0xf0>
	{
		SetBit(UCSRC,UCSZ0);
 192:	80 b5       	in	r24, 0x20	; 32
 194:	82 60       	ori	r24, 0x02	; 2
 196:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 198:	80 b5       	in	r24, 0x20	; 32
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 19e:	52 98       	cbi	0x0a, 2	; 10
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <UART_Init+0x102>
	}
	else if (a_UARtcfg_ptr->DataSize == DataSize9Bits)
 1a2:	89 30       	cpi	r24, 0x09	; 9
 1a4:	c9 f5       	brne	.+114    	; 0x218 <UART_Init+0x166>
	{
		SetBit(UCSRC,UCSZ0);
 1a6:	80 b5       	in	r24, 0x20	; 32
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 1ac:	80 b5       	in	r24, 0x20	; 32
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRB,UCSZ2);
 1b2:	52 9a       	sbi	0x0a, 2	; 10
	{
		return NotOk;
	}
	
	/*Check parity bits*/
	if (a_UARtcfg_ptr->ParityBit == ParityDisable)
 1b4:	8f 81       	ldd	r24, Y+7	; 0x07
 1b6:	81 11       	cpse	r24, r1
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <UART_Init+0x116>
	{
		ClrBit(UCSRC,UPM0);
 1ba:	80 b5       	in	r24, 0x20	; 32
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UPM1);
 1c0:	80 b5       	in	r24, 0x20	; 32
 1c2:	8f 7d       	andi	r24, 0xDF	; 223
 1c4:	80 bd       	out	0x20, r24	; 32
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <UART_Init+0x138>
	}
	else if (a_UARtcfg_ptr->ParityBit == ParityOdd)
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	39 f4       	brne	.+14     	; 0x1da <UART_Init+0x128>
	{
		SetBit(UCSRC,UPM0);
 1cc:	80 b5       	in	r24, 0x20	; 32
 1ce:	80 61       	ori	r24, 0x10	; 16
 1d0:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UPM1);
 1d2:	80 b5       	in	r24, 0x20	; 32
 1d4:	80 62       	ori	r24, 0x20	; 32
 1d6:	80 bd       	out	0x20, r24	; 32
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <UART_Init+0x138>
	}
	else if (a_UARtcfg_ptr->ParityBit == ParityEven)
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	f9 f4       	brne	.+62     	; 0x21c <UART_Init+0x16a>
	{
		ClrBit(UCSRC,UPM0);
 1de:	80 b5       	in	r24, 0x20	; 32
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UPM1);
 1e4:	80 b5       	in	r24, 0x20	; 32
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	80 bd       	out	0x20, r24	; 32
	{
		return NotOk;
	}
	
	/*Check stop bits*/
	if (a_UARtcfg_ptr->StopBits == StopBits1)
 1ea:	88 85       	ldd	r24, Y+8	; 0x08
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	29 f4       	brne	.+10     	; 0x1fa <UART_Init+0x148>
	{
		ClrBit(UCSRC,USBS);
 1f0:	80 b5       	in	r24, 0x20	; 32
 1f2:	87 7f       	andi	r24, 0xF7	; 247
 1f4:	80 bd       	out	0x20, r24	; 32
	else
	{
		return NotOk;
	}
	
	return OK;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	14 c0       	rjmp	.+40     	; 0x222 <UART_Init+0x170>
	/*Check stop bits*/
	if (a_UARtcfg_ptr->StopBits == StopBits1)
	{
		ClrBit(UCSRC,USBS);
	}
	else if (a_UARtcfg_ptr->StopBits == StopBits2)
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	89 f4       	brne	.+34     	; 0x220 <UART_Init+0x16e>
	{
		SetBit(UCSRC,USBS);
 1fe:	80 b5       	in	r24, 0x20	; 32
 200:	88 60       	ori	r24, 0x08	; 8
 202:	80 bd       	out	0x20, r24	; 32
	else
	{
		return NotOk;
	}
	
	return OK;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0d c0       	rjmp	.+26     	; 0x222 <UART_Init+0x170>
		SetBit(UCSRA,U2X);
		UBRRValue = ((F_CPU)/((a_UARtcfg_ptr->baudrate)*(8U)))-1;
	}
	else
	{
		return NotOk;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0b c0       	rjmp	.+22     	; 0x222 <UART_Init+0x170>
	{
		SetBit(UCSRB,TXCIE);
	}
	else
	{
		return NotOk;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	09 c0       	rjmp	.+18     	; 0x222 <UART_Init+0x170>
	{
		SetBit(UCSRB,RXCIE);
	}
	else
	{
		return NotOk;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	07 c0       	rjmp	.+14     	; 0x222 <UART_Init+0x170>
	{
		SetBit(UCSRB,UDRIE);
	}
	else
	{
		return NotOk;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	05 c0       	rjmp	.+10     	; 0x222 <UART_Init+0x170>
		SetBit(UCSRC,UCSZ1);
		SetBit(UCSRB,UCSZ2);
	}
	else
	{
		return NotOk;
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	03 c0       	rjmp	.+6      	; 0x222 <UART_Init+0x170>
		ClrBit(UCSRC,UPM0);
		SetBit(UCSRC,UPM1);
	}
	else
	{
		return NotOk;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	01 c0       	rjmp	.+2      	; 0x222 <UART_Init+0x170>
	{
		SetBit(UCSRC,USBS);
	}
	else
	{
		return NotOk;
 220:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return OK;
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <__udivmodsi4>:
 228:	a1 e2       	ldi	r26, 0x21	; 33
 22a:	1a 2e       	mov	r1, r26
 22c:	aa 1b       	sub	r26, r26
 22e:	bb 1b       	sub	r27, r27
 230:	fd 01       	movw	r30, r26
 232:	0d c0       	rjmp	.+26     	; 0x24e <__udivmodsi4_ep>

00000234 <__udivmodsi4_loop>:
 234:	aa 1f       	adc	r26, r26
 236:	bb 1f       	adc	r27, r27
 238:	ee 1f       	adc	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	a2 17       	cp	r26, r18
 23e:	b3 07       	cpc	r27, r19
 240:	e4 07       	cpc	r30, r20
 242:	f5 07       	cpc	r31, r21
 244:	20 f0       	brcs	.+8      	; 0x24e <__udivmodsi4_ep>
 246:	a2 1b       	sub	r26, r18
 248:	b3 0b       	sbc	r27, r19
 24a:	e4 0b       	sbc	r30, r20
 24c:	f5 0b       	sbc	r31, r21

0000024e <__udivmodsi4_ep>:
 24e:	66 1f       	adc	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	1a 94       	dec	r1
 258:	69 f7       	brne	.-38     	; 0x234 <__udivmodsi4_loop>
 25a:	60 95       	com	r22
 25c:	70 95       	com	r23
 25e:	80 95       	com	r24
 260:	90 95       	com	r25
 262:	9b 01       	movw	r18, r22
 264:	ac 01       	movw	r20, r24
 266:	bd 01       	movw	r22, r26
 268:	cf 01       	movw	r24, r30
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
