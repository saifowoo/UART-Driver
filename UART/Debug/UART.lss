
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000021a  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ac  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055f  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000163  00000000  00000000  00001fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000213e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "UART.h"

int main(void)
{
	UART_Init();
  92:	0e 94 4c 00 	call	0x98	; 0x98 <UART_Init>
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x4>

00000098 <UART_Init>:

Status UART_Init (void)
{
	/*Check Double speed bits & Calculate UBRR value*/
	uint16 UBRRValue = 0;
	if (UARTconfig.DoubleSpeed == DoubleSpeedDisable)
  98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UARTconfig+0x2>
  9c:	81 11       	cpse	r24, r1
  9e:	16 c0       	rjmp	.+44     	; 0xcc <UART_Init+0x34>
	{
		ClrBit(UCSRA,U2X);
  a0:	59 98       	cbi	0x0b, 1	; 11
		UBRRValue = ((F_CPU)/((UARTconfig.baudrate)*(16U)))-1;
  a2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
  a6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
  aa:	22 95       	swap	r18
  ac:	32 95       	swap	r19
  ae:	30 7f       	andi	r19, 0xF0	; 240
  b0:	32 27       	eor	r19, r18
  b2:	20 7f       	andi	r18, 0xF0	; 240
  b4:	32 27       	eor	r19, r18
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	60 e4       	ldi	r22, 0x40	; 64
  bc:	72 e4       	ldi	r23, 0x42	; 66
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodsi4>
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
  ca:	18 c0       	rjmp	.+48     	; 0xfc <UART_Init+0x64>
	}
	else if (UARTconfig.DoubleSpeed == DoubleSpeedEnable)
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	09 f0       	breq	.+2      	; 0xd2 <UART_Init+0x3a>
  d0:	78 c0       	rjmp	.+240    	; 0x1c2 <UART_Init+0x12a>
	{
		SetBit(UCSRA,U2X);
  d2:	59 9a       	sbi	0x0b, 1	; 11
		UBRRValue = ((F_CPU)/((UARTconfig.baudrate)*(8U)))-1;
  d4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
  d8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	60 e4       	ldi	r22, 0x40	; 64
  ee:	72 e4       	ldi	r23, 0x42	; 66
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodsi4>
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	31 09       	sbc	r19, r1
	{
		return NotOk;
	}
	
	/*Clear URSEL bit into UCSRA to write in UBRRH*/
	ClrBit(UCSRA,URSEL);
  fc:	5f 98       	cbi	0x0b, 7	; 11
	
	/*Set UBRR value into UBRRH & UBRRL*/
	UBRRH = (uint8)(UBRRValue>>8);
  fe:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8)UBRRValue;
 100:	29 b9       	out	0x09, r18	; 9
		
	/*Clear URSEL bit into UCSRA to write in UCSRC*/
	SetBit(UCSRA,URSEL);
 102:	5f 9a       	sbi	0x0b, 7	; 11
	
	/*Check data size bits*/
	if (UARTconfig.DataSize == DataSize5Bits)
 104:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <UARTconfig+0x6>
 108:	85 30       	cpi	r24, 0x05	; 5
 10a:	41 f4       	brne	.+16     	; 0x11c <UART_Init+0x84>
	{
		ClrBit(UCSRC,UCSZ0);
 10c:	80 b5       	in	r24, 0x20	; 32
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UCSZ1);
 112:	80 b5       	in	r24, 0x20	; 32
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 118:	52 98       	cbi	0x0a, 2	; 10
 11a:	27 c0       	rjmp	.+78     	; 0x16a <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize6Bits)
 11c:	86 30       	cpi	r24, 0x06	; 6
 11e:	41 f4       	brne	.+16     	; 0x130 <UART_Init+0x98>
	{
		SetBit(UCSRC,UCSZ0);
 120:	80 b5       	in	r24, 0x20	; 32
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UCSZ1);
 126:	80 b5       	in	r24, 0x20	; 32
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 12c:	52 98       	cbi	0x0a, 2	; 10
 12e:	1d c0       	rjmp	.+58     	; 0x16a <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize7Bits)
 130:	87 30       	cpi	r24, 0x07	; 7
 132:	41 f4       	brne	.+16     	; 0x144 <UART_Init+0xac>
	{
		ClrBit(UCSRC,UCSZ0);
 134:	80 b5       	in	r24, 0x20	; 32
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 13a:	80 b5       	in	r24, 0x20	; 32
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 140:	52 98       	cbi	0x0a, 2	; 10
 142:	13 c0       	rjmp	.+38     	; 0x16a <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize8Bits)
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	41 f4       	brne	.+16     	; 0x158 <UART_Init+0xc0>
	{
		SetBit(UCSRC,UCSZ0);
 148:	80 b5       	in	r24, 0x20	; 32
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 14e:	80 b5       	in	r24, 0x20	; 32
 150:	84 60       	ori	r24, 0x04	; 4
 152:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 154:	52 98       	cbi	0x0a, 2	; 10
 156:	09 c0       	rjmp	.+18     	; 0x16a <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize9Bits)
 158:	89 30       	cpi	r24, 0x09	; 9
 15a:	a9 f5       	brne	.+106    	; 0x1c6 <UART_Init+0x12e>
	{
		SetBit(UCSRC,UCSZ0);
 15c:	80 b5       	in	r24, 0x20	; 32
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 162:	80 b5       	in	r24, 0x20	; 32
 164:	84 60       	ori	r24, 0x04	; 4
 166:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRB,UCSZ2);
 168:	52 9a       	sbi	0x0a, 2	; 10
	{
		return NotOk;
	}
	
	/*Check parity bits*/
	if (UARTconfig.ParityBit == ParityDisable)
 16a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <UARTconfig+0x7>
 16e:	81 11       	cpse	r24, r1
 170:	07 c0       	rjmp	.+14     	; 0x180 <UART_Init+0xe8>
	{
		ClrBit(UCSRC,UPM0);
 172:	80 b5       	in	r24, 0x20	; 32
 174:	8f 7e       	andi	r24, 0xEF	; 239
 176:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UPM1);
 178:	80 b5       	in	r24, 0x20	; 32
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	80 bd       	out	0x20, r24	; 32
 17e:	11 c0       	rjmp	.+34     	; 0x1a2 <UART_Init+0x10a>
	}
	else if (UARTconfig.ParityBit == ParityOdd)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	39 f4       	brne	.+14     	; 0x192 <UART_Init+0xfa>
	{
		SetBit(UCSRC,UPM0);
 184:	80 b5       	in	r24, 0x20	; 32
 186:	80 61       	ori	r24, 0x10	; 16
 188:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UPM1);
 18a:	80 b5       	in	r24, 0x20	; 32
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	80 bd       	out	0x20, r24	; 32
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <UART_Init+0x10a>
	}
	else if (UARTconfig.ParityBit == ParityEven)
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	d1 f4       	brne	.+52     	; 0x1ca <UART_Init+0x132>
	{
		ClrBit(UCSRC,UPM0);
 196:	80 b5       	in	r24, 0x20	; 32
 198:	8f 7e       	andi	r24, 0xEF	; 239
 19a:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UPM1);
 19c:	80 b5       	in	r24, 0x20	; 32
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	80 bd       	out	0x20, r24	; 32
	{
		return NotOk;
	}
	
	/*Check stop bits*/
	if (UARTconfig.StopBits == StopBits1)
 1a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <UARTconfig+0x8>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <UART_Init+0x11c>
	{
		ClrBit(UCSRC,USBS);
 1aa:	80 b5       	in	r24, 0x20	; 32
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	80 bd       	out	0x20, r24	; 32
	else
	{
		return NotOk;
	}
	
	return OK;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	08 95       	ret
	/*Check stop bits*/
	if (UARTconfig.StopBits == StopBits1)
	{
		ClrBit(UCSRC,USBS);
	}
	else if (UARTconfig.StopBits == StopBits2)
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	59 f4       	brne	.+22     	; 0x1ce <UART_Init+0x136>
	{
		SetBit(UCSRC,USBS);
 1b8:	80 b5       	in	r24, 0x20	; 32
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	80 bd       	out	0x20, r24	; 32
	else
	{
		return NotOk;
	}
	
	return OK;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
		SetBit(UCSRA,U2X);
		UBRRValue = ((F_CPU)/((UARTconfig.baudrate)*(8U)))-1;
	}
	else
	{
		return NotOk;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
		SetBit(UCSRC,UCSZ1);
		SetBit(UCSRB,UCSZ2);
	}
	else
	{
		return NotOk;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
		ClrBit(UCSRC,UPM0);
		SetBit(UCSRC,UPM1);
	}
	else
	{
		return NotOk;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret
	{
		SetBit(UCSRC,USBS);
	}
	else
	{
		return NotOk;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return OK;
}
 1d0:	08 95       	ret

000001d2 <__udivmodsi4>:
 1d2:	a1 e2       	ldi	r26, 0x21	; 33
 1d4:	1a 2e       	mov	r1, r26
 1d6:	aa 1b       	sub	r26, r26
 1d8:	bb 1b       	sub	r27, r27
 1da:	fd 01       	movw	r30, r26
 1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <__udivmodsi4_ep>

000001de <__udivmodsi4_loop>:
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	ee 1f       	adc	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	a2 17       	cp	r26, r18
 1e8:	b3 07       	cpc	r27, r19
 1ea:	e4 07       	cpc	r30, r20
 1ec:	f5 07       	cpc	r31, r21
 1ee:	20 f0       	brcs	.+8      	; 0x1f8 <__udivmodsi4_ep>
 1f0:	a2 1b       	sub	r26, r18
 1f2:	b3 0b       	sbc	r27, r19
 1f4:	e4 0b       	sbc	r30, r20
 1f6:	f5 0b       	sbc	r31, r21

000001f8 <__udivmodsi4_ep>:
 1f8:	66 1f       	adc	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	88 1f       	adc	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	1a 94       	dec	r1
 202:	69 f7       	brne	.-38     	; 0x1de <__udivmodsi4_loop>
 204:	60 95       	com	r22
 206:	70 95       	com	r23
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	9b 01       	movw	r18, r22
 20e:	ac 01       	movw	r20, r24
 210:	bd 01       	movw	r22, r26
 212:	cf 01       	movw	r24, r30
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
