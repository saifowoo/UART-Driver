
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bee  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f2  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ad  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c1  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000261e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "UART.h"

int main(void)
{
	UART_Init();
  92:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_Init>
	/* Replace with your application code */
    while (1) 
    {
		UART_SendChar(1);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_SendChar>
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0x4>

0000009e <UART_Init>:

Status UART_Init (void)
{
	/*Check Double speed bits & Calculate UBRR value*/
	uint16 UBRRValue = 0;
	if (UARTconfig.DoubleSpeed == DoubleSpeedDisable)
  9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UARTconfig+0x2>
  a2:	81 11       	cpse	r24, r1
  a4:	16 c0       	rjmp	.+44     	; 0xd2 <UART_Init+0x34>
	{
		ClrBit(UCSRA,U2X);
  a6:	59 98       	cbi	0x0b, 1	; 11
		UBRRValue = ((F_CPU)/((UARTconfig.baudrate)*(16U)))-1;
  a8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
  ac:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
  b0:	22 95       	swap	r18
  b2:	32 95       	swap	r19
  b4:	30 7f       	andi	r19, 0xF0	; 240
  b6:	32 27       	eor	r19, r18
  b8:	20 7f       	andi	r18, 0xF0	; 240
  ba:	32 27       	eor	r19, r18
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	60 e4       	ldi	r22, 0x40	; 64
  c2:	72 e4       	ldi	r23, 0x42	; 66
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodsi4>
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1
  d0:	18 c0       	rjmp	.+48     	; 0x102 <UART_Init+0x64>
	}
	else if (UARTconfig.DoubleSpeed == DoubleSpeedEnable)
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	09 f0       	breq	.+2      	; 0xd8 <UART_Init+0x3a>
  d6:	78 c0       	rjmp	.+240    	; 0x1c8 <UART_Init+0x12a>
	{
		SetBit(UCSRA,U2X);
  d8:	59 9a       	sbi	0x0b, 1	; 11
		UBRRValue = ((F_CPU)/((UARTconfig.baudrate)*(8U)))-1;
  da:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
  de:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	60 e4       	ldi	r22, 0x40	; 64
  f4:	72 e4       	ldi	r23, 0x42	; 66
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodsi4>
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	31 09       	sbc	r19, r1
	{
		return NotOk;
	}
	
	/*Clear URSEL bit into UCSRA to write in UBRRH*/
	ClrBit(UCSRA,URSEL);
 102:	5f 98       	cbi	0x0b, 7	; 11
	
	/*Set UBRR value into UBRRH & UBRRL*/
	UBRRH = (uint8)(UBRRValue>>8);
 104:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8)UBRRValue;
 106:	29 b9       	out	0x09, r18	; 9
		
	/*Clear URSEL bit into UCSRA to write in UCSRC*/
	SetBit(UCSRA,URSEL);
 108:	5f 9a       	sbi	0x0b, 7	; 11
	
	/*Check data size bits*/
	if (UARTconfig.DataSize == DataSize5Bits)
 10a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <UARTconfig+0x6>
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	41 f4       	brne	.+16     	; 0x122 <UART_Init+0x84>
	{
		ClrBit(UCSRC,UCSZ0);
 112:	80 b5       	in	r24, 0x20	; 32
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UCSZ1);
 118:	80 b5       	in	r24, 0x20	; 32
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 11e:	52 98       	cbi	0x0a, 2	; 10
 120:	27 c0       	rjmp	.+78     	; 0x170 <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize6Bits)
 122:	86 30       	cpi	r24, 0x06	; 6
 124:	41 f4       	brne	.+16     	; 0x136 <UART_Init+0x98>
	{
		SetBit(UCSRC,UCSZ0);
 126:	80 b5       	in	r24, 0x20	; 32
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UCSZ1);
 12c:	80 b5       	in	r24, 0x20	; 32
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 132:	52 98       	cbi	0x0a, 2	; 10
 134:	1d c0       	rjmp	.+58     	; 0x170 <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize7Bits)
 136:	87 30       	cpi	r24, 0x07	; 7
 138:	41 f4       	brne	.+16     	; 0x14a <UART_Init+0xac>
	{
		ClrBit(UCSRC,UCSZ0);
 13a:	80 b5       	in	r24, 0x20	; 32
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 140:	80 b5       	in	r24, 0x20	; 32
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 146:	52 98       	cbi	0x0a, 2	; 10
 148:	13 c0       	rjmp	.+38     	; 0x170 <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize8Bits)
 14a:	88 30       	cpi	r24, 0x08	; 8
 14c:	41 f4       	brne	.+16     	; 0x15e <UART_Init+0xc0>
	{
		SetBit(UCSRC,UCSZ0);
 14e:	80 b5       	in	r24, 0x20	; 32
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 154:	80 b5       	in	r24, 0x20	; 32
 156:	84 60       	ori	r24, 0x04	; 4
 158:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRB,UCSZ2);
 15a:	52 98       	cbi	0x0a, 2	; 10
 15c:	09 c0       	rjmp	.+18     	; 0x170 <UART_Init+0xd2>
	}
	else if (UARTconfig.DataSize == DataSize9Bits)
 15e:	89 30       	cpi	r24, 0x09	; 9
 160:	a9 f5       	brne	.+106    	; 0x1cc <UART_Init+0x12e>
	{
		SetBit(UCSRC,UCSZ0);
 162:	80 b5       	in	r24, 0x20	; 32
 164:	82 60       	ori	r24, 0x02	; 2
 166:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 168:	80 b5       	in	r24, 0x20	; 32
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRB,UCSZ2);
 16e:	52 9a       	sbi	0x0a, 2	; 10
	{
		return NotOk;
	}
	
	/*Check parity bits*/
	if (UARTconfig.ParityBit == ParityDisable)
 170:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <UARTconfig+0x7>
 174:	81 11       	cpse	r24, r1
 176:	07 c0       	rjmp	.+14     	; 0x186 <UART_Init+0xe8>
	{
		ClrBit(UCSRC,UPM0);
 178:	80 b5       	in	r24, 0x20	; 32
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	80 bd       	out	0x20, r24	; 32
		ClrBit(UCSRC,UPM1);
 17e:	80 b5       	in	r24, 0x20	; 32
 180:	8f 7d       	andi	r24, 0xDF	; 223
 182:	80 bd       	out	0x20, r24	; 32
 184:	11 c0       	rjmp	.+34     	; 0x1a8 <UART_Init+0x10a>
	}
	else if (UARTconfig.ParityBit == ParityOdd)
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	39 f4       	brne	.+14     	; 0x198 <UART_Init+0xfa>
	{
		SetBit(UCSRC,UPM0);
 18a:	80 b5       	in	r24, 0x20	; 32
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UPM1);
 190:	80 b5       	in	r24, 0x20	; 32
 192:	80 62       	ori	r24, 0x20	; 32
 194:	80 bd       	out	0x20, r24	; 32
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <UART_Init+0x10a>
	}
	else if (UARTconfig.ParityBit == ParityEven)
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	d1 f4       	brne	.+52     	; 0x1d0 <UART_Init+0x132>
	{
		ClrBit(UCSRC,UPM0);
 19c:	80 b5       	in	r24, 0x20	; 32
 19e:	8f 7e       	andi	r24, 0xEF	; 239
 1a0:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UPM1);
 1a2:	80 b5       	in	r24, 0x20	; 32
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	80 bd       	out	0x20, r24	; 32
	{
		return NotOk;
	}
	
	/*Check stop bits*/
	if (UARTconfig.StopBits == StopBits1)
 1a8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <UARTconfig+0x8>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	29 f4       	brne	.+10     	; 0x1ba <UART_Init+0x11c>
	{
		ClrBit(UCSRC,USBS);
 1b0:	80 b5       	in	r24, 0x20	; 32
 1b2:	87 7f       	andi	r24, 0xF7	; 247
 1b4:	80 bd       	out	0x20, r24	; 32
	else
	{
		return NotOk;
	}
	
	return OK;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
	/*Check stop bits*/
	if (UARTconfig.StopBits == StopBits1)
	{
		ClrBit(UCSRC,USBS);
	}
	else if (UARTconfig.StopBits == StopBits2)
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <UART_Init+0x136>
	{
		SetBit(UCSRC,USBS);
 1be:	80 b5       	in	r24, 0x20	; 32
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	80 bd       	out	0x20, r24	; 32
	else
	{
		return NotOk;
	}
	
	return OK;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret
		SetBit(UCSRA,U2X);
		UBRRValue = ((F_CPU)/((UARTconfig.baudrate)*(8U)))-1;
	}
	else
	{
		return NotOk;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
		SetBit(UCSRC,UCSZ1);
		SetBit(UCSRB,UCSZ2);
	}
	else
	{
		return NotOk;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
		ClrBit(UCSRC,UPM0);
		SetBit(UCSRC,UPM1);
	}
	else
	{
		return NotOk;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
	{
		SetBit(UCSRC,USBS);
	}
	else
	{
		return NotOk;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return OK;
}
 1d6:	08 95       	ret

000001d8 <UART_SendChar>:


Status UART_SendChar (uint8 a_data)
{
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
 1d8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <UARTconfig+0x5>
 1dc:	91 11       	cpse	r25, r1
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <UART_SendChar+0x12>
	{
		while((UCSRA & (1<<UDRE)) == 0);					//wait until UART Data Reg is Empty (UDRE) (0 wait , 1 Empty you can transmit now)
 1e0:	5d 9b       	sbis	0x0b, 5	; 11
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <UART_SendChar+0x8>
		UDR = a_data;
 1e4:	8c b9       	out	0x0c, r24	; 12
	else
	{
		return NotOk;
	}
	
	return OK;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	08 95       	ret
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
	{
		while((UCSRA & (1<<UDRE)) == 0);					//wait until UART Data Reg is Empty (UDRE) (0 wait , 1 Empty you can transmit now)
		UDR = a_data;
	}
	else if (UARTconfig.UDRInterrupt == UDRInterruptEnable)
 1ea:	91 30       	cpi	r25, 0x01	; 1
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <UART_SendChar+0x1e>
	{
		UARTisr_g = a_data;
 1ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	else
	{
		return NotOk;
	}
	
	return OK;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret
	{
		UARTisr_g = a_data;
	}
	else
	{
		return NotOk;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return OK;
}
 1f8:	08 95       	ret

000001fa <__udivmodsi4>:
 1fa:	a1 e2       	ldi	r26, 0x21	; 33
 1fc:	1a 2e       	mov	r1, r26
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	fd 01       	movw	r30, r26
 204:	0d c0       	rjmp	.+26     	; 0x220 <__udivmodsi4_ep>

00000206 <__udivmodsi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	ee 1f       	adc	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	a2 17       	cp	r26, r18
 210:	b3 07       	cpc	r27, r19
 212:	e4 07       	cpc	r30, r20
 214:	f5 07       	cpc	r31, r21
 216:	20 f0       	brcs	.+8      	; 0x220 <__udivmodsi4_ep>
 218:	a2 1b       	sub	r26, r18
 21a:	b3 0b       	sbc	r27, r19
 21c:	e4 0b       	sbc	r30, r20
 21e:	f5 0b       	sbc	r31, r21

00000220 <__udivmodsi4_ep>:
 220:	66 1f       	adc	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	1a 94       	dec	r1
 22a:	69 f7       	brne	.-38     	; 0x206 <__udivmodsi4_loop>
 22c:	60 95       	com	r22
 22e:	70 95       	com	r23
 230:	80 95       	com	r24
 232:	90 95       	com	r25
 234:	9b 01       	movw	r18, r22
 236:	ac 01       	movw	r20, r24
 238:	bd 01       	movw	r22, r26
 23a:	cf 01       	movw	r24, r30
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
