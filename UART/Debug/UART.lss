
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000039c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c66  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000706  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061c  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ad  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000309  00000000  00000000  0000258d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 

#include "UART.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	uint8 data = 0;
  9c:	19 82       	std	Y+1, r1	; 0x01
	UART_Init();
  9e:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	UART_Start();
  a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <UART_Start>
	UART_Send("saif");
  a6:	89 e6       	ldi	r24, 0x69	; 105
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 27 01 	call	0x24e	; 0x24e <UART_Send>
	/* Replace with your application code */
    while (1) 
    {
		UART_ReceiveChar(&data);
  ae:	ce 01       	movw	r24, r28
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_ReceiveChar>
		UART_SendChar(data);
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_SendChar>
  bc:	f8 cf       	rjmp	.-16     	; 0xae <main+0x1c>

000000be <UART_Init>:
	{
		return NotOk;
	}
	
	return OK;
}
  be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UARTconfig+0x2>
  c2:	81 11       	cpse	r24, r1
  c4:	23 c0       	rjmp	.+70     	; 0x10c <UART_Init+0x4e>
  c6:	59 98       	cbi	0x0b, 1	; 11
  c8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
  cc:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
  d0:	c9 01       	movw	r24, r18
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	aa 1f       	adc	r26, r26
  dc:	bb 1f       	adc	r27, r27
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	aa 1f       	adc	r26, r26
  e4:	bb 1f       	adc	r27, r27
  e6:	9c 01       	movw	r18, r24
  e8:	ad 01       	movw	r20, r26
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	44 1f       	adc	r20, r20
  f0:	55 1f       	adc	r21, r21
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	44 1f       	adc	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	72 e4       	ldi	r23, 0x42	; 66
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
 10a:	21 c0       	rjmp	.+66     	; 0x14e <UART_Init+0x90>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	09 f0       	breq	.+2      	; 0x112 <UART_Init+0x54>
 110:	85 c0       	rjmp	.+266    	; 0x21c <UART_Init+0x15e>
 112:	59 9a       	sbi	0x0b, 1	; 11
 114:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
 118:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
 11c:	c9 01       	movw	r24, r18
 11e:	a0 e0       	ldi	r26, 0x00	; 0
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	aa 1f       	adc	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	aa 1f       	adc	r26, r26
 130:	bb 1f       	adc	r27, r27
 132:	9c 01       	movw	r18, r24
 134:	ad 01       	movw	r20, r26
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	44 1f       	adc	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	60 e4       	ldi	r22, 0x40	; 64
 140:	72 e4       	ldi	r23, 0x42	; 66
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	31 09       	sbc	r19, r1
 14e:	80 b5       	in	r24, 0x20	; 32
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	80 bd       	out	0x20, r24	; 32
 154:	30 bd       	out	0x20, r19	; 32
 156:	29 b9       	out	0x09, r18	; 9
 158:	80 b5       	in	r24, 0x20	; 32
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	80 bd       	out	0x20, r24	; 32
 15e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <UARTconfig+0x6>
 162:	85 30       	cpi	r24, 0x05	; 5
 164:	41 f4       	brne	.+16     	; 0x176 <UART_Init+0xb8>
 166:	80 b5       	in	r24, 0x20	; 32
 168:	8d 7f       	andi	r24, 0xFD	; 253
 16a:	80 bd       	out	0x20, r24	; 32
 16c:	80 b5       	in	r24, 0x20	; 32
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	80 bd       	out	0x20, r24	; 32
 172:	52 98       	cbi	0x0a, 2	; 10
 174:	27 c0       	rjmp	.+78     	; 0x1c4 <UART_Init+0x106>
 176:	86 30       	cpi	r24, 0x06	; 6
 178:	41 f4       	brne	.+16     	; 0x18a <UART_Init+0xcc>
 17a:	80 b5       	in	r24, 0x20	; 32
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	80 bd       	out	0x20, r24	; 32
 180:	80 b5       	in	r24, 0x20	; 32
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	80 bd       	out	0x20, r24	; 32
 186:	52 98       	cbi	0x0a, 2	; 10
 188:	1d c0       	rjmp	.+58     	; 0x1c4 <UART_Init+0x106>
 18a:	87 30       	cpi	r24, 0x07	; 7
 18c:	41 f4       	brne	.+16     	; 0x19e <UART_Init+0xe0>
 18e:	80 b5       	in	r24, 0x20	; 32
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	80 bd       	out	0x20, r24	; 32
 194:	80 b5       	in	r24, 0x20	; 32
 196:	84 60       	ori	r24, 0x04	; 4
 198:	80 bd       	out	0x20, r24	; 32
 19a:	52 98       	cbi	0x0a, 2	; 10
 19c:	13 c0       	rjmp	.+38     	; 0x1c4 <UART_Init+0x106>
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	41 f4       	brne	.+16     	; 0x1b2 <UART_Init+0xf4>
 1a2:	80 b5       	in	r24, 0x20	; 32
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 bd       	out	0x20, r24	; 32
 1a8:	80 b5       	in	r24, 0x20	; 32
 1aa:	84 60       	ori	r24, 0x04	; 4
 1ac:	80 bd       	out	0x20, r24	; 32
 1ae:	52 98       	cbi	0x0a, 2	; 10
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <UART_Init+0x106>
 1b2:	89 30       	cpi	r24, 0x09	; 9
 1b4:	a9 f5       	brne	.+106    	; 0x220 <UART_Init+0x162>
 1b6:	80 b5       	in	r24, 0x20	; 32
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	80 bd       	out	0x20, r24	; 32
 1bc:	80 b5       	in	r24, 0x20	; 32
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	80 bd       	out	0x20, r24	; 32
 1c2:	52 9a       	sbi	0x0a, 2	; 10
 1c4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <UARTconfig+0x7>
 1c8:	81 11       	cpse	r24, r1
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <UART_Init+0x11c>
 1cc:	80 b5       	in	r24, 0x20	; 32
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	80 bd       	out	0x20, r24	; 32
 1d2:	80 b5       	in	r24, 0x20	; 32
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	80 bd       	out	0x20, r24	; 32
 1d8:	11 c0       	rjmp	.+34     	; 0x1fc <UART_Init+0x13e>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	39 f4       	brne	.+14     	; 0x1ec <UART_Init+0x12e>
 1de:	80 b5       	in	r24, 0x20	; 32
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	80 bd       	out	0x20, r24	; 32
 1e4:	80 b5       	in	r24, 0x20	; 32
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	80 bd       	out	0x20, r24	; 32
 1ea:	08 c0       	rjmp	.+16     	; 0x1fc <UART_Init+0x13e>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d1 f4       	brne	.+52     	; 0x224 <UART_Init+0x166>
 1f0:	80 b5       	in	r24, 0x20	; 32
 1f2:	8f 7e       	andi	r24, 0xEF	; 239
 1f4:	80 bd       	out	0x20, r24	; 32
 1f6:	80 b5       	in	r24, 0x20	; 32
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	80 bd       	out	0x20, r24	; 32
 1fc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <UARTconfig+0x8>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	29 f4       	brne	.+10     	; 0x20e <UART_Init+0x150>
 204:	80 b5       	in	r24, 0x20	; 32
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	80 bd       	out	0x20, r24	; 32
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	59 f4       	brne	.+22     	; 0x228 <UART_Init+0x16a>
 212:	80 b5       	in	r24, 0x20	; 32
 214:	88 60       	ori	r24, 0x08	; 8
 216:	80 bd       	out	0x20, r24	; 32
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	08 95       	ret
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret

0000022c <UART_SendChar>:
 22c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <UARTconfig+0x5>
 230:	91 11       	cpse	r25, r1
 232:	05 c0       	rjmp	.+10     	; 0x23e <UART_SendChar+0x12>
 234:	5d 9b       	sbis	0x0b, 5	; 11
 236:	fe cf       	rjmp	.-4      	; 0x234 <UART_SendChar+0x8>
 238:	8c b9       	out	0x0c, r24	; 12
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	08 95       	ret
 23e:	91 30       	cpi	r25, 0x01	; 1
 240:	21 f4       	brne	.+8      	; 0x24a <UART_SendChar+0x1e>
 242:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <UARTisr_g>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret

0000024e <UART_Send>:
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
 254:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <UARTconfig+0x5>
 258:	81 11       	cpse	r24, r1
 25a:	0b c0       	rjmp	.+22     	; 0x272 <UART_Send+0x24>
 25c:	88 81       	ld	r24, Y
 25e:	88 23       	and	r24, r24
 260:	31 f1       	breq	.+76     	; 0x2ae <UART_Send+0x60>
 262:	21 96       	adiw	r28, 0x01	; 1
 264:	0e 94 16 01 	call	0x22c	; 0x22c <UART_SendChar>
 268:	89 91       	ld	r24, Y+
 26a:	81 11       	cpse	r24, r1
 26c:	fb cf       	rjmp	.-10     	; 0x264 <UART_Send+0x16>
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	23 c0       	rjmp	.+70     	; 0x2b8 <UART_Send+0x6a>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	f1 f4       	brne	.+60     	; 0x2b2 <UART_Send+0x64>
 276:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <index>
 27a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <index>
 27e:	fe 01       	movw	r30, r28
 280:	e8 0f       	add	r30, r24
 282:	f1 1d       	adc	r31, r1
 284:	80 81       	ld	r24, Z
 286:	88 23       	and	r24, r24
 288:	b1 f0       	breq	.+44     	; 0x2b6 <UART_Send+0x68>
 28a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <index>
 28e:	fe 01       	movw	r30, r28
 290:	e8 0f       	add	r30, r24
 292:	f1 1d       	adc	r31, r1
 294:	80 81       	ld	r24, Z
 296:	0e 94 16 01 	call	0x22c	; 0x22c <UART_SendChar>
 29a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <index>
 29e:	fe 01       	movw	r30, r28
 2a0:	e8 0f       	add	r30, r24
 2a2:	f1 1d       	adc	r31, r1
 2a4:	80 81       	ld	r24, Z
 2a6:	81 11       	cpse	r24, r1
 2a8:	f0 cf       	rjmp	.-32     	; 0x28a <UART_Send+0x3c>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <UART_Send+0x6a>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <UART_Send+0x6a>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <UART_Send+0x6a>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <UART_ReceiveChar>:
 2be:	fc 01       	movw	r30, r24
 2c0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <UARTconfig+0x3>
 2c4:	91 11       	cpse	r25, r1
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <UART_ReceiveChar+0x16>
 2c8:	5f 9b       	sbis	0x0b, 7	; 11
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <UART_ReceiveChar+0xa>
 2cc:	8c b1       	in	r24, 0x0c	; 12
 2ce:	80 83       	st	Z, r24
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	91 30       	cpi	r25, 0x01	; 1
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <UART_ReceiveChar+0x34>
 2d8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	31 f4       	brne	.+12     	; 0x2ec <UART_ReceiveChar+0x2e>
 2e0:	8c b1       	in	r24, 0x0c	; 12
 2e2:	80 83       	st	Z, r24
 2e4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret
 2ec:	10 82       	st	Z, r1
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	08 95       	ret
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <UART_Start>:
/*******************************************************************************/


Status UART_Start (void)
{
	SetBit(UCSRB,TXEN);
 2f6:	53 9a       	sbi	0x0a, 3	; 10
	SetBit(UCSRB,RXEN);
 2f8:	54 9a       	sbi	0x0a, 4	; 10
	
	/*Check TX compelet interrupt Enable bit*/
	if (UARTconfig.TxcInterrupt == TxcInterruptDisable)
 2fa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <UARTconfig+0x4>
 2fe:	81 11       	cpse	r24, r1
 300:	02 c0       	rjmp	.+4      	; 0x306 <UART_Start+0x10>
	{
		ClrBit(UCSRB,TXCIE);
 302:	56 98       	cbi	0x0a, 6	; 10
 304:	06 c0       	rjmp	.+12     	; 0x312 <UART_Start+0x1c>
	}
	else if (UARTconfig.TxcInterrupt == TxcInterruptEnable)
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	f9 f4       	brne	.+62     	; 0x348 <UART_Start+0x52>
	{
		SetBit(UCSRB,TXCIE);
 30a:	56 9a       	sbi	0x0a, 6	; 10
		SetBit(SREG,I);
 30c:	8f b7       	in	r24, 0x3f	; 63
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	8f bf       	out	0x3f, r24	; 63
	{
		return NotOk;
	}
	
	/*Check RX comolete interrupt Enable bit*/
	if (UARTconfig.RxcInterrupt == RxcInterruptDisable)
 312:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <UARTconfig+0x3>
 316:	81 11       	cpse	r24, r1
 318:	02 c0       	rjmp	.+4      	; 0x31e <UART_Start+0x28>
	{
		ClrBit(UCSRB,RXCIE);
 31a:	57 98       	cbi	0x0a, 7	; 10
 31c:	06 c0       	rjmp	.+12     	; 0x32a <UART_Start+0x34>
	}
	else if (UARTconfig.RxcInterrupt == RxcInterruptEnable)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	a9 f4       	brne	.+42     	; 0x34c <UART_Start+0x56>
	{
		SetBit(UCSRB,RXCIE);
 322:	57 9a       	sbi	0x0a, 7	; 10
		SetBit(SREG,I);
 324:	8f b7       	in	r24, 0x3f	; 63
 326:	80 68       	ori	r24, 0x80	; 128
 328:	8f bf       	out	0x3f, r24	; 63
	{
		return NotOk;
	}
	
	/*Check UDR Empty interrupt Enable bit*/
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
 32a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <UARTconfig+0x5>
 32e:	81 11       	cpse	r24, r1
 330:	03 c0       	rjmp	.+6      	; 0x338 <UART_Start+0x42>
	{
		ClrBit(UCSRB,UDRIE);
 332:	55 98       	cbi	0x0a, 5	; 10
	else
	{
		return NotOk;
	}
	
	return OK;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	08 95       	ret
	/*Check UDR Empty interrupt Enable bit*/
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
	{
		ClrBit(UCSRB,UDRIE);
	}
	else if (UARTconfig.UDRInterrupt == UDRInterruptEnable)
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	51 f4       	brne	.+20     	; 0x350 <UART_Start+0x5a>
	{
		SetBit(UCSRB,UDRIE);
 33c:	55 9a       	sbi	0x0a, 5	; 10
		SetBit(SREG,I);
 33e:	8f b7       	in	r24, 0x3f	; 63
 340:	80 68       	ori	r24, 0x80	; 128
 342:	8f bf       	out	0x3f, r24	; 63
	else
	{
		return NotOk;
	}
	
	return OK;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	08 95       	ret
		SetBit(UCSRB,TXCIE);
		SetBit(SREG,I);
	}
	else
	{
		return NotOk;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
		SetBit(UCSRB,RXCIE);
		SetBit(SREG,I);
	}
	else
	{
		return NotOk;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
		SetBit(UCSRB,UDRIE);
		SetBit(SREG,I);
	}
	else
	{
		return NotOk;
 350:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return OK;
}
 352:	08 95       	ret

00000354 <__udivmodsi4>:
 354:	a1 e2       	ldi	r26, 0x21	; 33
 356:	1a 2e       	mov	r1, r26
 358:	aa 1b       	sub	r26, r26
 35a:	bb 1b       	sub	r27, r27
 35c:	fd 01       	movw	r30, r26
 35e:	0d c0       	rjmp	.+26     	; 0x37a <__udivmodsi4_ep>

00000360 <__udivmodsi4_loop>:
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	ee 1f       	adc	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	a2 17       	cp	r26, r18
 36a:	b3 07       	cpc	r27, r19
 36c:	e4 07       	cpc	r30, r20
 36e:	f5 07       	cpc	r31, r21
 370:	20 f0       	brcs	.+8      	; 0x37a <__udivmodsi4_ep>
 372:	a2 1b       	sub	r26, r18
 374:	b3 0b       	sbc	r27, r19
 376:	e4 0b       	sbc	r30, r20
 378:	f5 0b       	sbc	r31, r21

0000037a <__udivmodsi4_ep>:
 37a:	66 1f       	adc	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	1a 94       	dec	r1
 384:	69 f7       	brne	.-38     	; 0x360 <__udivmodsi4_loop>
 386:	60 95       	com	r22
 388:	70 95       	com	r23
 38a:	80 95       	com	r24
 38c:	90 95       	com	r25
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	bd 01       	movw	r22, r26
 394:	cf 01       	movw	r24, r30
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
