
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c40  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000740  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062a  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000309  00000000  00000000  00002546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000284f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "UART.h"
#include "DIO.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a bb       	out	0x1a, r24	; 26
	uint8 recivevalue = 0;
  a0:	19 82       	std	Y+1, r1	; 0x01
	UART_Init();
  a2:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_Init>
	while (1)
	{
		UART_Start();
  a6:	0e 94 36 01 	call	0x26c	; 0x26c <UART_Start>
		UART_ReceiveChar(&recivevalue);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 1a 01 	call	0x234	; 0x234 <UART_ReceiveChar>
		PORTA = ((recivevalue - 48) & 0x0F) | ((recivevalue - 48) & 0xF0);
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	90 ed       	ldi	r25, 0xD0	; 208
  b6:	98 0f       	add	r25, r24
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	8b bb       	out	0x1b, r24	; 27
		UART_Stop();
  c0:	0e 94 65 01 	call	0x2ca	; 0x2ca <UART_Stop>
  c4:	f0 cf       	rjmp	.-32     	; 0xa6 <main+0x14>

000000c6 <UART_Init>:
	{
		return NotOk;
	}
	
	return OK;
}
  c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UARTconfig+0x2>
  ca:	81 11       	cpse	r24, r1
  cc:	23 c0       	rjmp	.+70     	; 0x114 <UART_Init+0x4e>
  ce:	59 98       	cbi	0x0b, 1	; 11
  d0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
  d4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	aa 1f       	adc	r26, r26
  e4:	bb 1f       	adc	r27, r27
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	aa 1f       	adc	r26, r26
  ec:	bb 1f       	adc	r27, r27
  ee:	9c 01       	movw	r18, r24
  f0:	ad 01       	movw	r20, r26
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	44 1f       	adc	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	44 1f       	adc	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	60 e4       	ldi	r22, 0x40	; 64
 104:	72 e4       	ldi	r23, 0x42	; 66
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodsi4>
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
 112:	21 c0       	rjmp	.+66     	; 0x156 <UART_Init+0x90>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	09 f0       	breq	.+2      	; 0x11a <UART_Init+0x54>
 118:	85 c0       	rjmp	.+266    	; 0x224 <UART_Init+0x15e>
 11a:	59 9a       	sbi	0x0b, 1	; 11
 11c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
 120:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
 124:	c9 01       	movw	r24, r18
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	aa 1f       	adc	r26, r26
 130:	bb 1f       	adc	r27, r27
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	aa 1f       	adc	r26, r26
 138:	bb 1f       	adc	r27, r27
 13a:	9c 01       	movw	r18, r24
 13c:	ad 01       	movw	r20, r26
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	44 1f       	adc	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	60 e4       	ldi	r22, 0x40	; 64
 148:	72 e4       	ldi	r23, 0x42	; 66
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodsi4>
 152:	21 50       	subi	r18, 0x01	; 1
 154:	31 09       	sbc	r19, r1
 156:	80 b5       	in	r24, 0x20	; 32
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	80 bd       	out	0x20, r24	; 32
 15c:	30 bd       	out	0x20, r19	; 32
 15e:	29 b9       	out	0x09, r18	; 9
 160:	80 b5       	in	r24, 0x20	; 32
 162:	80 68       	ori	r24, 0x80	; 128
 164:	80 bd       	out	0x20, r24	; 32
 166:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <UARTconfig+0x6>
 16a:	85 30       	cpi	r24, 0x05	; 5
 16c:	41 f4       	brne	.+16     	; 0x17e <UART_Init+0xb8>
 16e:	80 b5       	in	r24, 0x20	; 32
 170:	8d 7f       	andi	r24, 0xFD	; 253
 172:	80 bd       	out	0x20, r24	; 32
 174:	80 b5       	in	r24, 0x20	; 32
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	80 bd       	out	0x20, r24	; 32
 17a:	52 98       	cbi	0x0a, 2	; 10
 17c:	27 c0       	rjmp	.+78     	; 0x1cc <UART_Init+0x106>
 17e:	86 30       	cpi	r24, 0x06	; 6
 180:	41 f4       	brne	.+16     	; 0x192 <UART_Init+0xcc>
 182:	80 b5       	in	r24, 0x20	; 32
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 bd       	out	0x20, r24	; 32
 188:	80 b5       	in	r24, 0x20	; 32
 18a:	8b 7f       	andi	r24, 0xFB	; 251
 18c:	80 bd       	out	0x20, r24	; 32
 18e:	52 98       	cbi	0x0a, 2	; 10
 190:	1d c0       	rjmp	.+58     	; 0x1cc <UART_Init+0x106>
 192:	87 30       	cpi	r24, 0x07	; 7
 194:	41 f4       	brne	.+16     	; 0x1a6 <UART_Init+0xe0>
 196:	80 b5       	in	r24, 0x20	; 32
 198:	8d 7f       	andi	r24, 0xFD	; 253
 19a:	80 bd       	out	0x20, r24	; 32
 19c:	80 b5       	in	r24, 0x20	; 32
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 bd       	out	0x20, r24	; 32
 1a2:	52 98       	cbi	0x0a, 2	; 10
 1a4:	13 c0       	rjmp	.+38     	; 0x1cc <UART_Init+0x106>
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	41 f4       	brne	.+16     	; 0x1ba <UART_Init+0xf4>
 1aa:	80 b5       	in	r24, 0x20	; 32
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	80 bd       	out	0x20, r24	; 32
 1b0:	80 b5       	in	r24, 0x20	; 32
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	80 bd       	out	0x20, r24	; 32
 1b6:	52 98       	cbi	0x0a, 2	; 10
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <UART_Init+0x106>
 1ba:	89 30       	cpi	r24, 0x09	; 9
 1bc:	a9 f5       	brne	.+106    	; 0x228 <UART_Init+0x162>
 1be:	80 b5       	in	r24, 0x20	; 32
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	80 bd       	out	0x20, r24	; 32
 1c4:	80 b5       	in	r24, 0x20	; 32
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	80 bd       	out	0x20, r24	; 32
 1ca:	52 9a       	sbi	0x0a, 2	; 10
 1cc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <UARTconfig+0x7>
 1d0:	81 11       	cpse	r24, r1
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <UART_Init+0x11c>
 1d4:	80 b5       	in	r24, 0x20	; 32
 1d6:	8f 7e       	andi	r24, 0xEF	; 239
 1d8:	80 bd       	out	0x20, r24	; 32
 1da:	80 b5       	in	r24, 0x20	; 32
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	80 bd       	out	0x20, r24	; 32
 1e0:	11 c0       	rjmp	.+34     	; 0x204 <UART_Init+0x13e>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	39 f4       	brne	.+14     	; 0x1f4 <UART_Init+0x12e>
 1e6:	80 b5       	in	r24, 0x20	; 32
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	80 bd       	out	0x20, r24	; 32
 1ec:	80 b5       	in	r24, 0x20	; 32
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	80 bd       	out	0x20, r24	; 32
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <UART_Init+0x13e>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	d1 f4       	brne	.+52     	; 0x22c <UART_Init+0x166>
 1f8:	80 b5       	in	r24, 0x20	; 32
 1fa:	8f 7e       	andi	r24, 0xEF	; 239
 1fc:	80 bd       	out	0x20, r24	; 32
 1fe:	80 b5       	in	r24, 0x20	; 32
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 bd       	out	0x20, r24	; 32
 204:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <UARTconfig+0x8>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	29 f4       	brne	.+10     	; 0x216 <UART_Init+0x150>
 20c:	80 b5       	in	r24, 0x20	; 32
 20e:	87 7f       	andi	r24, 0xF7	; 247
 210:	80 bd       	out	0x20, r24	; 32
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	59 f4       	brne	.+22     	; 0x230 <UART_Init+0x16a>
 21a:	80 b5       	in	r24, 0x20	; 32
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	80 bd       	out	0x20, r24	; 32
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	08 95       	ret
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret

00000234 <UART_ReceiveChar>:
 234:	fc 01       	movw	r30, r24
 236:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <UARTconfig+0x3>
 23a:	91 11       	cpse	r25, r1
 23c:	06 c0       	rjmp	.+12     	; 0x24a <UART_ReceiveChar+0x16>
 23e:	5f 9b       	sbis	0x0b, 7	; 11
 240:	fe cf       	rjmp	.-4      	; 0x23e <UART_ReceiveChar+0xa>
 242:	8c b1       	in	r24, 0x0c	; 12
 244:	80 83       	st	Z, r24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
 24a:	91 30       	cpi	r25, 0x01	; 1
 24c:	69 f4       	brne	.+26     	; 0x268 <UART_ReceiveChar+0x34>
 24e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	31 f4       	brne	.+12     	; 0x262 <UART_ReceiveChar+0x2e>
 256:	8c b1       	in	r24, 0x0c	; 12
 258:	80 83       	st	Z, r24
 25a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	08 95       	ret
 262:	10 82       	st	Z, r1
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 95       	ret

0000026c <UART_Start>:
 *		Outputs:		None
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_Start (void)
{
	SetBit(UCSRB,TXEN);
 26c:	53 9a       	sbi	0x0a, 3	; 10
	SetBit(UCSRB,RXEN);
 26e:	54 9a       	sbi	0x0a, 4	; 10
	
	/*Check TX compelet interrupt Enable bit*/
	if (UARTconfig.TxcInterrupt == TxcInterruptDisable)
 270:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <UARTconfig+0x4>
 274:	81 11       	cpse	r24, r1
 276:	02 c0       	rjmp	.+4      	; 0x27c <UART_Start+0x10>
	{
		ClrBit(UCSRB,TXCIE);
 278:	56 98       	cbi	0x0a, 6	; 10
 27a:	06 c0       	rjmp	.+12     	; 0x288 <UART_Start+0x1c>
	}
	else if (UARTconfig.TxcInterrupt == TxcInterruptEnable)
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	f9 f4       	brne	.+62     	; 0x2be <UART_Start+0x52>
	{
		SetBit(UCSRB,TXCIE);
 280:	56 9a       	sbi	0x0a, 6	; 10
		SetBit(SREG,I);
 282:	8f b7       	in	r24, 0x3f	; 63
 284:	80 68       	ori	r24, 0x80	; 128
 286:	8f bf       	out	0x3f, r24	; 63
	{
		return NotOk;
	}
	
	/*Check RX comolete interrupt Enable bit*/
	if (UARTconfig.RxcInterrupt == RxcInterruptDisable)
 288:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <UARTconfig+0x3>
 28c:	81 11       	cpse	r24, r1
 28e:	02 c0       	rjmp	.+4      	; 0x294 <UART_Start+0x28>
	{
		ClrBit(UCSRB,RXCIE);
 290:	57 98       	cbi	0x0a, 7	; 10
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <UART_Start+0x34>
	}
	else if (UARTconfig.RxcInterrupt == RxcInterruptEnable)
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	a9 f4       	brne	.+42     	; 0x2c2 <UART_Start+0x56>
	{
		SetBit(UCSRB,RXCIE);
 298:	57 9a       	sbi	0x0a, 7	; 10
		SetBit(SREG,I);
 29a:	8f b7       	in	r24, 0x3f	; 63
 29c:	80 68       	ori	r24, 0x80	; 128
 29e:	8f bf       	out	0x3f, r24	; 63
	{
		return NotOk;
	}
	
	/*Check UDR Empty interrupt Enable bit*/
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
 2a0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <UARTconfig+0x5>
 2a4:	81 11       	cpse	r24, r1
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <UART_Start+0x42>
	{
		ClrBit(UCSRB,UDRIE);
 2a8:	55 98       	cbi	0x0a, 5	; 10
	else
	{
		return NotOk;
	}
	
	return OK;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
	/*Check UDR Empty interrupt Enable bit*/
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
	{
		ClrBit(UCSRB,UDRIE);
	}
	else if (UARTconfig.UDRInterrupt == UDRInterruptEnable)
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	51 f4       	brne	.+20     	; 0x2c6 <UART_Start+0x5a>
	{
		SetBit(UCSRB,UDRIE);
 2b2:	55 9a       	sbi	0x0a, 5	; 10
		SetBit(SREG,I);
 2b4:	8f b7       	in	r24, 0x3f	; 63
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	8f bf       	out	0x3f, r24	; 63
	else
	{
		return NotOk;
	}
	
	return OK;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 95       	ret
		SetBit(UCSRB,TXCIE);
		SetBit(SREG,I);
	}
	else
	{
		return NotOk;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
		SetBit(UCSRB,RXCIE);
		SetBit(SREG,I);
	}
	else
	{
		return NotOk;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
		SetBit(UCSRB,UDRIE);
		SetBit(SREG,I);
	}
	else
	{
		return NotOk;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return OK;
}
 2c8:	08 95       	ret

000002ca <UART_Stop>:
 *		Outputs:		None
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_Stop (void)
{
	ClrBit(UCSRB,TXEN);
 2ca:	53 98       	cbi	0x0a, 3	; 10
	ClrBit(UCSRB,RXEN);
 2cc:	54 98       	cbi	0x0a, 4	; 10
	
	ClrBit(UCSRB,UDRIE);
 2ce:	55 98       	cbi	0x0a, 5	; 10
	ClrBit(UCSRB,RXCIE);
 2d0:	57 98       	cbi	0x0a, 7	; 10
	ClrBit(UCSRB,TXCIE);
 2d2:	56 98       	cbi	0x0a, 6	; 10
	
	return OK;
}
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	08 95       	ret

000002d8 <__udivmodsi4>:
 2d8:	a1 e2       	ldi	r26, 0x21	; 33
 2da:	1a 2e       	mov	r1, r26
 2dc:	aa 1b       	sub	r26, r26
 2de:	bb 1b       	sub	r27, r27
 2e0:	fd 01       	movw	r30, r26
 2e2:	0d c0       	rjmp	.+26     	; 0x2fe <__udivmodsi4_ep>

000002e4 <__udivmodsi4_loop>:
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	ee 1f       	adc	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	a2 17       	cp	r26, r18
 2ee:	b3 07       	cpc	r27, r19
 2f0:	e4 07       	cpc	r30, r20
 2f2:	f5 07       	cpc	r31, r21
 2f4:	20 f0       	brcs	.+8      	; 0x2fe <__udivmodsi4_ep>
 2f6:	a2 1b       	sub	r26, r18
 2f8:	b3 0b       	sbc	r27, r19
 2fa:	e4 0b       	sbc	r30, r20
 2fc:	f5 0b       	sbc	r31, r21

000002fe <__udivmodsi4_ep>:
 2fe:	66 1f       	adc	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	1a 94       	dec	r1
 308:	69 f7       	brne	.-38     	; 0x2e4 <__udivmodsi4_loop>
 30a:	60 95       	com	r22
 30c:	70 95       	com	r23
 30e:	80 95       	com	r24
 310:	90 95       	com	r25
 312:	9b 01       	movw	r18, r22
 314:	ac 01       	movw	r20, r24
 316:	bd 01       	movw	r22, r26
 318:	cf 01       	movw	r24, r30
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
