
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000004ec  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  0000058e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e03  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000857  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000888  00000000  00000000  00001d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000924  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_13>
  38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_14>
  3c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  8a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
	return value;
}

void DIO_SetPinDirection (uint8 PinNum,uint8 PinDirection)
{
	if((PinNum >= PINA0) && (PinNum <= PINA7))
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	00 f5       	brcc	.+64     	; 0xd6 <DIO_SetPinDirection+0x44>
	{
		if (PinDirection == LOW)
  96:	61 11       	cpse	r22, r1
  98:	0e c0       	rjmp	.+28     	; 0xb6 <DIO_SetPinDirection+0x24>
		{
			ClrBit(DDRA,PinNum);
  9a:	4a b3       	in	r20, 0x1a	; 26
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDirection+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDirection+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	80 95       	com	r24
  b0:	84 23       	and	r24, r20
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
		}
		else if (PinDirection == HIGH)
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_SetPinDirection+0x2a>
  ba:	79 c0       	rjmp	.+242    	; 0x1ae <DIO_SetPinDirection+0x11c>
		{
			SetBit(DDRA,PinNum);
  bc:	4a b3       	in	r20, 0x1a	; 26
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_SetPinDirection+0x38>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_SetPinDirection+0x34>
  ce:	cb 01       	movw	r24, r22
  d0:	84 2b       	or	r24, r20
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
		else
		{
			//#error "Please enter number 0 or 1"
		}
	}
	else if ((PinNum >= PINB0) && (PinNum <= PINB7))
  d6:	98 ef       	ldi	r25, 0xF8	; 248
  d8:	98 0f       	add	r25, r24
  da:	98 30       	cpi	r25, 0x08	; 8
  dc:	08 f5       	brcc	.+66     	; 0x120 <DIO_SetPinDirection+0x8e>
	{
		if (PinDirection == LOW)
  de:	61 11       	cpse	r22, r1
  e0:	0e c0       	rjmp	.+28     	; 0xfe <DIO_SetPinDirection+0x6c>
		{
			ClrBit(DDRB,(PinNum-8));
  e2:	47 b3       	in	r20, 0x17	; 23
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPinDirection+0x5e>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	9a 95       	dec	r25
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPinDirection+0x5a>
  f4:	cb 01       	movw	r24, r22
  f6:	80 95       	com	r24
  f8:	84 23       	and	r24, r20
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
		}
		else if (PinDirection == HIGH)
  fe:	61 30       	cpi	r22, 0x01	; 1
 100:	09 f0       	breq	.+2      	; 0x104 <DIO_SetPinDirection+0x72>
 102:	55 c0       	rjmp	.+170    	; 0x1ae <DIO_SetPinDirection+0x11c>
		{
			SetBit(DDRB,(PinNum-8));
 104:	47 b3       	in	r20, 0x17	; 23
 106:	88 50       	subi	r24, 0x08	; 8
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0x7e>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	08 95       	ret
		else
		{
			//#error "Please enter number 0 or 1"
		}
	}
	else if ((PinNum >= PINC0) && (PinNum <= PINC7))
 120:	90 ef       	ldi	r25, 0xF0	; 240
 122:	98 0f       	add	r25, r24
 124:	98 30       	cpi	r25, 0x08	; 8
 126:	00 f5       	brcc	.+64     	; 0x168 <DIO_SetPinDirection+0xd6>
	{
		if (PinDirection == LOW)
 128:	61 11       	cpse	r22, r1
 12a:	0e c0       	rjmp	.+28     	; 0x148 <DIO_SetPinDirection+0xb6>
		{
			ClrBit(DDRC,(PinNum-16));
 12c:	44 b3       	in	r20, 0x14	; 20
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0xa8>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	9a 95       	dec	r25
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0xa4>
 13e:	cb 01       	movw	r24, r22
 140:	80 95       	com	r24
 142:	84 23       	and	r24, r20
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret
		}
		else if (PinDirection == HIGH)
 148:	61 30       	cpi	r22, 0x01	; 1
 14a:	89 f5       	brne	.+98     	; 0x1ae <DIO_SetPinDirection+0x11c>
		{
			SetBit(DDRC,(PinNum-16));
 14c:	44 b3       	in	r20, 0x14	; 20
 14e:	80 51       	subi	r24, 0x10	; 16
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPinDirection+0xca>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	8a 95       	dec	r24
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPinDirection+0xc6>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	84 bb       	out	0x14, r24	; 20
 166:	08 95       	ret
		else
		{
			//#error "Please enter number 0 or 1"
		}
	}
	else if ((PinNum >= PIND0) && (PinNum <= PIND7))
 168:	98 ee       	ldi	r25, 0xE8	; 232
 16a:	98 0f       	add	r25, r24
 16c:	98 30       	cpi	r25, 0x08	; 8
 16e:	f8 f4       	brcc	.+62     	; 0x1ae <DIO_SetPinDirection+0x11c>
	{
		if (PinDirection == LOW)
 170:	61 11       	cpse	r22, r1
 172:	0e c0       	rjmp	.+28     	; 0x190 <DIO_SetPinDirection+0xfe>
		{
			ClrBit(DDRD,(PinNum-24));
 174:	41 b3       	in	r20, 0x11	; 17
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPinDirection+0xf0>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	9a 95       	dec	r25
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPinDirection+0xec>
 186:	cb 01       	movw	r24, r22
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	08 95       	ret
		}
		else if (PinDirection == HIGH)
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	69 f4       	brne	.+26     	; 0x1ae <DIO_SetPinDirection+0x11c>
		{
			SetBit(DDRD,(PinNum-24));
 194:	41 b3       	in	r20, 0x11	; 17
 196:	88 51       	subi	r24, 0x18	; 24
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDirection+0x112>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDirection+0x10e>
 1a8:	cb 01       	movw	r24, r22
 1aa:	84 2b       	or	r24, r20
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	08 95       	ret

000001b0 <main>:

/*volatile*/ uint8 recivevalue = 0;

int main(void)
{
	DDRA = 0xFF;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	8a bb       	out	0x1a, r24	; 26
	
	UART_Init();
 1b4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <UART_Init>
	while (1)
	{
		UART_Start();
 1b8:	0e 94 2a 02 	call	0x454	; 0x454 <UART_Start>
		PORTA = ((recivevalue - 48) & 0x0F) | ((recivevalue - 48) & 0xF0);
 1bc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 1c0:	90 ed       	ldi	r25, 0xD0	; 208
 1c2:	98 0f       	add	r25, r24
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	f5 cf       	rjmp	.-22     	; 0x1b8 <main+0x8>

000001ce <UART_ISRCallBackRx>:
	}
}

extern void UART_ISRCallBackRx (void)
{
	DIO_SetPinDirection(LED0,OUTPUT);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	8c e0       	ldi	r24, 0x0C	; 12
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	TglBit(PORTB,PIN4);
 1d6:	98 b3       	in	r25, 0x18	; 24
 1d8:	80 e1       	ldi	r24, 0x10	; 16
 1da:	89 27       	eor	r24, r25
 1dc:	88 bb       	out	0x18, r24	; 24
	UART_ReceiveChar(&recivevalue);
 1de:	8e e6       	ldi	r24, 0x6E	; 110
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 17 02 	call	0x42e	; 0x42e <UART_ReceiveChar>
 1e6:	08 95       	ret

000001e8 <__vector_15>:
	{
		return NotOk;
	}
	
	return OK;
}
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <UARTconfig+0x9>
 20e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <UARTconfig+0xa>
 212:	30 97       	sbiw	r30, 0x00	; 0
 214:	09 f0       	breq	.+2      	; 0x218 <__vector_15+0x30>
 216:	09 95       	icall
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_14>:
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <UARTisr_g>
 24a:	88 23       	and	r24, r24
 24c:	51 f0       	breq	.+20     	; 0x262 <__vector_14+0x28>
 24e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <UARTisr_g>
 252:	8c b9       	out	0x0c, r24	; 12
 254:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <index>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <index>
 25e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <UARTisr_g>
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_13>:
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <UARTconfig+0xb>
 294:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <UARTconfig+0xc>
 298:	30 97       	sbiw	r30, 0x00	; 0
 29a:	09 f0       	breq	.+2      	; 0x29e <__vector_13+0x30>
 29c:	09 95       	icall
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <UART_Init>:
 2c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UARTconfig+0x2>
 2c4:	81 11       	cpse	r24, r1
 2c6:	23 c0       	rjmp	.+70     	; 0x30e <UART_Init+0x4e>
 2c8:	59 98       	cbi	0x0b, 1	; 11
 2ca:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
 2ce:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
 2d2:	c9 01       	movw	r24, r18
 2d4:	a0 e0       	ldi	r26, 0x00	; 0
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	9c 01       	movw	r18, r24
 2ea:	ad 01       	movw	r20, r26
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	44 1f       	adc	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	44 1f       	adc	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	60 e4       	ldi	r22, 0x40	; 64
 2fe:	72 e4       	ldi	r23, 0x42	; 66
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__udivmodsi4>
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	31 09       	sbc	r19, r1
 30c:	21 c0       	rjmp	.+66     	; 0x350 <UART_Init+0x90>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <UART_Init+0x54>
 312:	85 c0       	rjmp	.+266    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 314:	59 9a       	sbi	0x0b, 1	; 11
 316:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <UARTconfig>
 31a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <UARTconfig+0x1>
 31e:	c9 01       	movw	r24, r18
 320:	a0 e0       	ldi	r26, 0x00	; 0
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	9c 01       	movw	r18, r24
 336:	ad 01       	movw	r20, r26
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	44 1f       	adc	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	60 e4       	ldi	r22, 0x40	; 64
 342:	72 e4       	ldi	r23, 0x42	; 66
 344:	8f e0       	ldi	r24, 0x0F	; 15
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__udivmodsi4>
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	31 09       	sbc	r19, r1
 350:	80 b5       	in	r24, 0x20	; 32
 352:	8f 77       	andi	r24, 0x7F	; 127
 354:	80 bd       	out	0x20, r24	; 32
 356:	30 bd       	out	0x20, r19	; 32
 358:	29 b9       	out	0x09, r18	; 9
 35a:	80 b5       	in	r24, 0x20	; 32
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	80 bd       	out	0x20, r24	; 32
 360:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <UARTconfig+0x6>
 364:	85 30       	cpi	r24, 0x05	; 5
 366:	41 f4       	brne	.+16     	; 0x378 <UART_Init+0xb8>
 368:	80 b5       	in	r24, 0x20	; 32
 36a:	8d 7f       	andi	r24, 0xFD	; 253
 36c:	80 bd       	out	0x20, r24	; 32
 36e:	80 b5       	in	r24, 0x20	; 32
 370:	8b 7f       	andi	r24, 0xFB	; 251
 372:	80 bd       	out	0x20, r24	; 32
 374:	52 98       	cbi	0x0a, 2	; 10
 376:	27 c0       	rjmp	.+78     	; 0x3c6 <UART_Init+0x106>
 378:	86 30       	cpi	r24, 0x06	; 6
 37a:	41 f4       	brne	.+16     	; 0x38c <UART_Init+0xcc>
 37c:	80 b5       	in	r24, 0x20	; 32
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	80 bd       	out	0x20, r24	; 32
 382:	80 b5       	in	r24, 0x20	; 32
 384:	8b 7f       	andi	r24, 0xFB	; 251
 386:	80 bd       	out	0x20, r24	; 32
 388:	52 98       	cbi	0x0a, 2	; 10
 38a:	1d c0       	rjmp	.+58     	; 0x3c6 <UART_Init+0x106>
 38c:	87 30       	cpi	r24, 0x07	; 7
 38e:	41 f4       	brne	.+16     	; 0x3a0 <UART_Init+0xe0>
 390:	80 b5       	in	r24, 0x20	; 32
 392:	8d 7f       	andi	r24, 0xFD	; 253
 394:	80 bd       	out	0x20, r24	; 32
 396:	80 b5       	in	r24, 0x20	; 32
 398:	84 60       	ori	r24, 0x04	; 4
 39a:	80 bd       	out	0x20, r24	; 32
 39c:	52 98       	cbi	0x0a, 2	; 10
 39e:	13 c0       	rjmp	.+38     	; 0x3c6 <UART_Init+0x106>
 3a0:	88 30       	cpi	r24, 0x08	; 8
 3a2:	41 f4       	brne	.+16     	; 0x3b4 <UART_Init+0xf4>
 3a4:	80 b5       	in	r24, 0x20	; 32
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	80 bd       	out	0x20, r24	; 32
 3aa:	80 b5       	in	r24, 0x20	; 32
 3ac:	84 60       	ori	r24, 0x04	; 4
 3ae:	80 bd       	out	0x20, r24	; 32
 3b0:	52 98       	cbi	0x0a, 2	; 10
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <UART_Init+0x106>
 3b4:	89 30       	cpi	r24, 0x09	; 9
 3b6:	a9 f5       	brne	.+106    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3b8:	80 b5       	in	r24, 0x20	; 32
 3ba:	82 60       	ori	r24, 0x02	; 2
 3bc:	80 bd       	out	0x20, r24	; 32
 3be:	80 b5       	in	r24, 0x20	; 32
 3c0:	84 60       	ori	r24, 0x04	; 4
 3c2:	80 bd       	out	0x20, r24	; 32
 3c4:	52 9a       	sbi	0x0a, 2	; 10
 3c6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <UARTconfig+0x7>
 3ca:	81 11       	cpse	r24, r1
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <UART_Init+0x11c>
 3ce:	80 b5       	in	r24, 0x20	; 32
 3d0:	8f 7e       	andi	r24, 0xEF	; 239
 3d2:	80 bd       	out	0x20, r24	; 32
 3d4:	80 b5       	in	r24, 0x20	; 32
 3d6:	8f 7d       	andi	r24, 0xDF	; 223
 3d8:	80 bd       	out	0x20, r24	; 32
 3da:	11 c0       	rjmp	.+34     	; 0x3fe <UART_Init+0x13e>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	39 f4       	brne	.+14     	; 0x3ee <UART_Init+0x12e>
 3e0:	80 b5       	in	r24, 0x20	; 32
 3e2:	80 61       	ori	r24, 0x10	; 16
 3e4:	80 bd       	out	0x20, r24	; 32
 3e6:	80 b5       	in	r24, 0x20	; 32
 3e8:	80 62       	ori	r24, 0x20	; 32
 3ea:	80 bd       	out	0x20, r24	; 32
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <UART_Init+0x13e>
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	d1 f4       	brne	.+52     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f2:	80 b5       	in	r24, 0x20	; 32
 3f4:	8f 7e       	andi	r24, 0xEF	; 239
 3f6:	80 bd       	out	0x20, r24	; 32
 3f8:	80 b5       	in	r24, 0x20	; 32
 3fa:	80 62       	ori	r24, 0x20	; 32
 3fc:	80 bd       	out	0x20, r24	; 32
 3fe:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <UARTconfig+0x8>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	29 f4       	brne	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	80 b5       	in	r24, 0x20	; 32
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	80 bd       	out	0x20, r24	; 32
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	59 f4       	brne	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 414:	80 b5       	in	r24, 0x20	; 32
 416:	88 60       	ori	r24, 0x08	; 8
 418:	80 bd       	out	0x20, r24	; 32
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	08 95       	ret
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret

0000042e <UART_ReceiveChar>:
 42e:	fc 01       	movw	r30, r24
 430:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <UARTconfig+0x3>
 434:	91 11       	cpse	r25, r1
 436:	06 c0       	rjmp	.+12     	; 0x444 <UART_ReceiveChar+0x16>
 438:	5f 9b       	sbis	0x0b, 7	; 11
 43a:	fe cf       	rjmp	.-4      	; 0x438 <UART_ReceiveChar+0xa>
 43c:	8c b1       	in	r24, 0x0c	; 12
 43e:	80 83       	st	Z, r24
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
 444:	91 30       	cpi	r25, 0x01	; 1
 446:	21 f4       	brne	.+8      	; 0x450 <UART_ReceiveChar+0x22>
 448:	8c b1       	in	r24, 0x0c	; 12
 44a:	80 83       	st	Z, r24
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	08 95       	ret
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret

00000454 <UART_Start>:
 *		Outputs:		None
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_Start (void)
{
	SetBit(UCSRB,TXEN);
 454:	53 9a       	sbi	0x0a, 3	; 10
	SetBit(UCSRB,RXEN);
 456:	54 9a       	sbi	0x0a, 4	; 10
	
	/*Check TX compelet interrupt Enable bit*/
	if (UARTconfig.TxcInterrupt == TxcInterruptDisable)
 458:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <UARTconfig+0x4>
 45c:	81 11       	cpse	r24, r1
 45e:	02 c0       	rjmp	.+4      	; 0x464 <UART_Start+0x10>
	{
		ClrBit(UCSRB,TXCIE);
 460:	56 98       	cbi	0x0a, 6	; 10
 462:	04 c0       	rjmp	.+8      	; 0x46c <UART_Start+0x18>
	}
	else if (UARTconfig.TxcInterrupt == TxcInterruptEnable)
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	c1 f4       	brne	.+48     	; 0x498 <UART_Start+0x44>
	{
		SetBit(UCSRB,TXCIE);
 468:	56 9a       	sbi	0x0a, 6	; 10
		sei();
 46a:	78 94       	sei
	{
		return NotOk;
	}
	
	/*Check RX complete interrupt Enable bit*/
	if (UARTconfig.RxcInterrupt == RxcInterruptDisable)
 46c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <UARTconfig+0x3>
 470:	81 11       	cpse	r24, r1
 472:	02 c0       	rjmp	.+4      	; 0x478 <UART_Start+0x24>
	{
		ClrBit(UCSRB,RXCIE);
 474:	57 98       	cbi	0x0a, 7	; 10
 476:	04 c0       	rjmp	.+8      	; 0x480 <UART_Start+0x2c>
	}
	else if (UARTconfig.RxcInterrupt == RxcInterruptEnable)
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	81 f4       	brne	.+32     	; 0x49c <UART_Start+0x48>
	{
		SetBit(UCSRB,RXCIE);
 47c:	57 9a       	sbi	0x0a, 7	; 10
		sei();
 47e:	78 94       	sei
	{
		return NotOk;
	}
	
	/*Check UDR Empty interrupt Enable bit*/
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
 480:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <UARTconfig+0x5>
 484:	81 11       	cpse	r24, r1
 486:	03 c0       	rjmp	.+6      	; 0x48e <UART_Start+0x3a>
	{
		ClrBit(UCSRB,UDRIE);
 488:	55 98       	cbi	0x0a, 5	; 10
	else
	{
		return NotOk;
	}
	
	return OK;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
	/*Check UDR Empty interrupt Enable bit*/
	if (UARTconfig.UDRInterrupt == UDRInterruptDisable)
	{
		ClrBit(UCSRB,UDRIE);
	}
	else if (UARTconfig.UDRInterrupt == UDRInterruptEnable)
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	39 f4       	brne	.+14     	; 0x4a0 <UART_Start+0x4c>
	{
		SetBit(UCSRB,UDRIE);
 492:	55 9a       	sbi	0x0a, 5	; 10
		sei();
 494:	78 94       	sei
 496:	08 95       	ret
		SetBit(UCSRB,TXCIE);
		sei();
	}
	else
	{
		return NotOk;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
		SetBit(UCSRB,RXCIE);
		sei();
	}
	else
	{
		return NotOk;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
		SetBit(UCSRB,UDRIE);
		sei();
	}
	else
	{
		return NotOk;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return OK;
}
 4a2:	08 95       	ret

000004a4 <__udivmodsi4>:
 4a4:	a1 e2       	ldi	r26, 0x21	; 33
 4a6:	1a 2e       	mov	r1, r26
 4a8:	aa 1b       	sub	r26, r26
 4aa:	bb 1b       	sub	r27, r27
 4ac:	fd 01       	movw	r30, r26
 4ae:	0d c0       	rjmp	.+26     	; 0x4ca <__udivmodsi4_ep>

000004b0 <__udivmodsi4_loop>:
 4b0:	aa 1f       	adc	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	ee 1f       	adc	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	a2 17       	cp	r26, r18
 4ba:	b3 07       	cpc	r27, r19
 4bc:	e4 07       	cpc	r30, r20
 4be:	f5 07       	cpc	r31, r21
 4c0:	20 f0       	brcs	.+8      	; 0x4ca <__udivmodsi4_ep>
 4c2:	a2 1b       	sub	r26, r18
 4c4:	b3 0b       	sbc	r27, r19
 4c6:	e4 0b       	sbc	r30, r20
 4c8:	f5 0b       	sbc	r31, r21

000004ca <__udivmodsi4_ep>:
 4ca:	66 1f       	adc	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	1a 94       	dec	r1
 4d4:	69 f7       	brne	.-38     	; 0x4b0 <__udivmodsi4_loop>
 4d6:	60 95       	com	r22
 4d8:	70 95       	com	r23
 4da:	80 95       	com	r24
 4dc:	90 95       	com	r25
 4de:	9b 01       	movw	r18, r22
 4e0:	ac 01       	movw	r20, r24
 4e2:	bd 01       	movw	r22, r26
 4e4:	cf 01       	movw	r24, r30
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
